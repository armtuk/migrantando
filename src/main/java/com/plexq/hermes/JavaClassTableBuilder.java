/*
        Copyright Alex R.M. Turner 2008
        This file is part of Hermes DB
        Hermes DB is free software; you can redistribute it and/or modify
        it under the terms of the Lesser GNU General Public License as published by
        the Free Software Foundation; version 3 of the License.

        Hermes DB is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        GNU General Public License for more details.

        You should have received a copy of the Lesser GNU General Public License
        along with Hermes DB if not, write to the Free Software
        Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
        This file is released under the LGPL v3.0
*/
package com.plexq.hermes;

import com.plexq.hermes.util.Util;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.SQLException;
import java.util.*;

// TODO make this smart enough to figure out inheritance chain somehow, at least for our case, cope with mapping entity if appropriate
public class JavaClassTableBuilder extends TableBuilder {
    private String packageName;

    private String dumpPath;

    private List<String> entityFields;

    public JavaClassTableBuilder() {
        entityFields = new ArrayList<String>();
        entityFields.addAll(Arrays.asList(entityFieldsS));
    }

    private static String[] entityFieldsS = {
            "id",
            "created_timestamp",
            "updated_timestamp",
            "version",
            "Version",
            "updated_by_id",
            "created_by_id"
    };

    @Override
    public String buildTable(TableRepresentation tr) throws SQLException, TableBuildException {
        Map<String, Class> types = tr.getTypeMap();
        Map<String, Guidance> guidance = tr.getMetaData().getTableGuidance();

        File f = new File(dumpPath + "/" + Util.convertToCamelCaseFormat(tr.getTableName(), true) + ".java");
        try {
        FileWriter fw = new FileWriter(f);

        StringBuffer sql=new StringBuffer();

        sql.append("package ");
        sql.append(packageName);
        sql.append(";\n\n");

        sql.append("import javax.persistence.*;\n");
        sql.append("import java.io.Serializable;\n");
        sql.append("import java.util.Calendar;\n");

        sql.append("\n");

        sql.append("/**\n * Autogenerated by JavaClassTableBuilder\n */\n");

        sql.append("public class ");
        sql.append(Util.convertToCamelCaseFormat(tr.getTableName(), true));
        sql.append(" extends Entity implements Serializable {\n");

        String pkeys[] = tr.getPrimaryKeys();
        String pkey = null;
        if (pkeys.length==1) {
            pkey = pkeys[0];
        }

        for (String a: types.keySet()) {
            if (entityFields.contains(a)) {
                continue;
            }

            Guidance g=guidance.get(a);

            Class lc = types.get(a);
            String temporal = "";
            if (lc.equals(java.sql.Timestamp.class) || lc.equals(java.sql.Date.class)) {
                lc = java.util.Calendar.class;
                if (lc.equals(java.sql.Timestamp.class)) {
                    temporal = "\t@Temporal(TemporalType.TIMESTAMP)\n";
                }
                else {
                    temporal = "\t@Temporal(TemporalType.DATE)\n";
                }
            }

            ForeignKey fk = null;

            if (g!=null) {
                 fk = g.getForeignKey();
                if (pkey!=null && a.equals(pkey)) {
                    sql.append("\t@Id\n");
                }

            }

            if (fk != null) {
                sql.append("\t@ManyToOne");
                sql.append("\t@JoinColumn(name=\"");
            }
            else {
                sql.append("\t@Column(name=\"");
            }

            sql.append(a);
            sql.append("\"");

            if (g!=null && g.isNullable()) {
                sql.append(",nullable = false");
            }

            sql.append(")\n");

            sql.append(temporal);

            sql.append("\tprivate ");
            sql.append(types.get(a).getSimpleName());
            sql.append(" ");
            sql.append(Util.convertToCamelCaseFormat(a, false));
            sql.append(";\n\n");
        }

        for (String a: types.keySet()) {

            Class lc = types.get(a);
            String temporal = "";
            if (lc.equals(java.sql.Timestamp.class) || lc.equals(java.sql.Date.class)) {
                lc = java.util.Calendar.class;
                if (lc.equals(java.sql.Timestamp.class)) {
                    temporal = "\t@Temporal(TemporalType.TIMESTAMP)\n";
                }
                else {
                    temporal = "\t@Temporal(TemporalType.DATE)\n";
                }
            }

            sql.append("\tpublic ");
            sql.append(lc.getSimpleName());
            sql.append(" get");
            sql.append(Util.convertToCamelCaseFormat(a, true));
            sql.append(" () {\n");
            sql.append("\t\treturn ");
            sql.append(Util.convertToCamelCaseFormat(a, false));
            sql.append(";\n");
            sql.append("\t}\n\n");

            sql.append("\tpublic void set");
            sql.append(Util.convertToCamelCaseFormat(a, true));
            sql.append(" (");
            sql.append(Util.convertToCamelCaseFormat(a, true));
            sql.append(" ");
            sql.append(Util.convertToCamelCaseFormat(a, false));
            sql.append(") {\n");
            sql.append("\t\tthis.");
            sql.append(Util.convertToCamelCaseFormat(a, false));
            sql.append(" = ");
            sql.append(Util.convertToCamelCaseFormat(a, false));
            sql.append(";\n");
            sql.append("\t}\n\n");
        }

            sql.append("}\n");

            fw.write(sql.toString());

            fw.close();

            return sql.toString();
        }
        catch (IOException ioe) {
            System.out.println("Oops "+ioe.getMessage());
            ioe.printStackTrace();
        }

        return null;
    }

    public void setPackageName(String packageName) {
        this.packageName = packageName;
    }

    public String getDumpPath() {
        return dumpPath;
    }

    public void setDumpPath(String dumpPath) {
        this.dumpPath = dumpPath;
    }

    public List<String> getEntityFields() {
        return entityFields;
    }

    public void setEntityFields(List<String> entityFields) {
        this.entityFields = entityFields;
    }
}
